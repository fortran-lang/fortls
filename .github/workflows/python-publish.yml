# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: PyPi Release

on:
  release:
    types: [published]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      # This is a temporary workaround until GitHub Actions start natively
      # supporting signed commits like they should
      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

        # see: https://github.community/t/how-to-get-just-the-tag-name/16241/7
      - name: Get the version
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Set global variables
        shell: bash
        run: |
          echo "VERSION=${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_ENV

      - name: Set __version__
        shell: bash
        run: sed -i "s@\".*\"@\"${VERSION}\"@g" "fortls/_version.py"

      - name: Commit the new version
        shell: bash
        run: |
          git config --global user.name 'gnikit'
          git config --global user.email 'giannis.nikiteas@gmail.com'
          git fetch origin
          git switch actions/testing
          git commit -S fortls/_version.py -m "Auto-Update version" -v
          git push
          git tag -f "${VERSION}"
          git push --delete origin "${VERSION}"
          git push origin "${VERSION}"

      - name: Build package
        run: python -m build

      - name: Publish to Test PyPi
        if: startsWith(github.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
      - name: Publish to PyPi
        if: startsWith(github.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
