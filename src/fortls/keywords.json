{
  "var_def": {
    "ALLOCATABLE": {
      "doc": "Specifies that an object is allocatable."
    },
    "ASYNCHRONOUS": {
      "doc": "Specifies that a variable can be used for asynchronous input and output."
    },
    "BIND": {
      "doc": "Specifies that an object is interoperable with C and has external linkage."
    },
    "CODIMENSION": {
      "doc": "Specifies that an entity is a coarray, and specifies its corank and cobounds, if any."
    },
    "CONTIGUOUS": {
      "doc": "Specifies that the target of a pointer or an assumed-sized array is contiguous."
    },
    "DIMENSION(:)": {
      "doc": "Specifies that an object is an array, and defines the shape of the array."
    },
    "EXTERNAL": {
      "doc": "Allows an external procedure, a dummy procedure, a procedure pointer, or a block data subprogram to be used as an actual argument."
    },
    "INTRINSIC": {
      "doc": "Allows the specific name of an intrinsic procedure to be used as an actual argument."
    },
    "POINTER": {
      "doc": "Specifies that an object or a procedure is a pointer (a dynamic variable)."
    },
    "PROTECTED": {
      "doc": "Specifies limitations on the use of module entities."
    },
    "TARGET": {
      "doc": "Specifies that an object can become the target of a pointer (it can be pointed to)."
    },
    "VOLATILE": {
      "doc": "Specifies that the value of an object is entirely unpredictable, based on information local to the current program unit. It prevents objects from being optimized during compilation."
    }
  },
  "arg": {
    "INTENT(IN)": {
      "doc": "Specifies that the dummy argument will be used only to provide data to the procedure."
    },
    "INTENT(OUT)": {
      "doc": "Specifies that the dummy argument will be used to pass data from the procedure back to the calling program."
    },
    "INTENT(INOUT)": {
      "doc": "Specifies that the dummy argument can both provide data to the procedure and return data to the calling program."
    },
    "OPTIONAL": {
      "doc": "Permits dummy arguments to be omitted in a procedure reference."
    },
    "SAVE": {
      "doc": "Causes the values and definition of objects to be retained after execution of a RETURN or END statement in a subprogram."
    },
    "VALUE": {
      "doc": "Specifies a type of argument association for a dummy argument."
    }
  },
  "type_mem": {
    "DEFERRED": {
      "doc": "Indicates that the procedure is deferred. Deferred bindings must only be specified for derived-type definitions with the ABSTRACT attribute."
    },
    "NON_OVERRIDABLE": {
      "doc": "Determines whether a binding can be overridden in an extended type. You must not specify NON_OVERRIDABLE for a binding with the DEFERRED attribute."
    },
    "NOPASS": {
      "doc": "Indicate that the procedure has no passed-object dummy argument."
    },
    "PASS": {
      "doc": "Indicates that the procedure has no passed-object dummy argument.",
      "args": "arg_name"
    }
  },
  "vis": {
    "PRIVATE": {},
    "PUBLIC": {}
  },
  "param": {
    "PARAMETER": {}
  }
}
